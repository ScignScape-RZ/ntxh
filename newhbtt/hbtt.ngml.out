\BOOKMARK [1][-]{Doc-Start}{Hypergraph-Based Type Theory ...}{}% 1
\BOOKMARK [1][-]{section.1}{Hub Applications and Gatekeeper Code}{}% 2
\BOOKMARK [2][-]{section*.1}{Gatekeeper Code}{section.1}% 3
\BOOKMARK [2][-]{section*.2}{Core Language vs. External Tools}{section.1}% 4
\BOOKMARK [1][-]{section.2}{Case Studies}{}% 5
\BOOKMARK [2][-]{section*.4}{How ``Internet of Things" Interoperability Affects Data Modeling Priorities}{section.2}% 6
\BOOKMARK [2][-]{section*.5}{Linguistic Case-Study}{section.2}% 7
\BOOKMARK [2][-]{section*.7}{Proactive Design}{section.2}% 8
\BOOKMARK [1][-]{section.3}{Directed Hypergraphs and Generalized Lambda Calculus}{}% 9
\BOOKMARK [2][-]{section*.9}{Generalized Lambda Calculus}{section.3}% 10
\BOOKMARK [2][-]{section*.10}{Directed Hypergraphs and 'Channel Abstractions'}{section.3}% 11
\BOOKMARK [2][-]{section*.14}{Channelized Hypergraphs and RDF}{section.3}% 12
\BOOKMARK [2][-]{section*.19}{Procedural Input/Output Protocols via Type Theory}{section.3}% 13
\BOOKMARK [3][-]{subsubsection.3.4.1}{Kinds of Abstraction}{section*.19}% 14
\BOOKMARK [3][-]{subsubsection.3.4.2}{Channelized Type Systems}{section*.19}% 15
\BOOKMARK [2][-]{section*.20}{Described Types and Actual Types}{section.3}% 16
\BOOKMARK [2][-]{section*.21}{Range-Bounded Types, Value Constructors, and Addressability}{section.3}% 17
\BOOKMARK [2][-]{section*.22}{Dependent Types and Typestate}{section.3}% 18
\BOOKMARK [1][-]{section.4}{Modeling Procedures via Channelized Hypergraphs}{}% 19
\BOOKMARK [2][-]{section*.24}{Initializing Function-Typed Values}{section.4}% 20
\BOOKMARK [2][-]{section*.26}{Addressability and Implementation}{section.4}% 21
\BOOKMARK [2][-]{section*.27}{Described Types and Actual Types}{section.4}% 22
\BOOKMARK [2][-]{section*.28}{Range-Bounded Types, Value Constructors, and Addressability}{section.4}% 23
\BOOKMARK [2][-]{section*.29}{Dependent Types and Typestate}{section.4}% 24
\BOOKMARK [1][-]{section.5}{Conclusion}{}% 25
\BOOKMARK [1][-]{section*.30}{References}{}% 26
