
`section.Gatekeeper Code`

`p.
There are several design principles which can help ensure 
safety in large-scale, native/desktop-style `GUI;-based 
applications.  These include:

`enumerate,
`item;  Identify operational relationships between types.  
Suppose `calS; is a data structure modeled via type `caltypeT;.  
This type can then be associated with a type (say, 
`typeTp;) of `GUI; component which visually displays 
values of type `typeT;.  There may also be a type 
(say, `typeTpp;) representing `typeT; values in a format 
suitable for database persistence.  Application code should 
explicitly indicate these sorts of inter-type relationships.

`item;  Identify coding assumptions which determine the validity 
of typed values and of function calls.  For each 
application-specific data type, consider whether every 
computationally possible instance of that type is actually 
meaningful for the real-world domain which the type represents.  
For instance, a type representing blood pressure has a subset 
of values which are biologically meaningful %-- where systolic 
pressure is greater than diastolic and where both numbers are 
in a sensible range.  Likewise, for every procedure defined 
on application-specific data types, consider whether the procedure 
might receive arguments that are computationally feasible but 
empirically nonsensical.  Then, establish a protocol for 
acting upon erroneous data values or procedure parameters.  
How should the error be handled, without disrupting the 
overall application?

`item;  Identify points in the code base which represent new data 
being introduced into the application, or code which can materially 
affect the `q.outside world`/.  Most of the code behind `GUI; 
software will manage data being transferred between different 
parts of the system, internally.  However, there will be 
specific code sites %-- e.g., specific procedures %-- which 
receive new data from external sources, or respond to 
external signals.  A simple example is, for desktop applications, 
the preliminary code which runs when users click a mouse button.  
In the CyberPhysical context, an example might be code which 
is activated when motion-detector sensors signal something moving 
in their vicinity.  These are the `q.surface` points where data 
`q.enters the system`/.

Conversely, other code points locate 
the software's capabilities to initiate external effects.  For 
instance, one consequence of users clicking a mouse button might 
be that the on-screen cursor changes shape.  Or, motion detection 
might trigger lights to be turned on.  In these cases the software 
is hooked up to external devices which have tangible capabilities, 
such as activating a light-source or modifying the on-screen cursor.  
The specific code points which leverage such capabilities 
represent data `q.leaving the system`/.  

In general, it is important to identify points where data 
`q.enters` and `q.leaves` the system, and to distinguish 
these points from sites where data is transferred 
`q.inside` the application.  This helps ensure that 
incoming data and external effects are properly vetted.  
Several mathematical frameworks have been developed 
which codify the intuition of software components as 
`q.systems` with external data sources and effects, 
extending the model of software as self-contained 
information spaces: notably, Functional-Reactive Programming 
(see e.g. `cite<JenniferPaykin>;, 
`cite<PaykinKrishnaswami>;, 
`cite<WolfgangJeltsch>;) and the theory of 
Hypergraph Categories 
(`cite<BobCoecke>;, `cite<BrendanFong>;, 
`cite<BrendanFongThesis>;, `cite<AleksKissinger>;). 
`enumerate`

Methods I propose in this chapter are applicable to each 
of these concerns, but for purposes of exposition I 
will focus on the second issue: testing 
type instances and procedure parameters for fine-grained 
specifications (more precise than strong typing alone). 
`p`


`p.
Strongly-typed programming language offer some guarantees on 
types and procedures: a function which takes an integer will 
never be called on a value that is `i.not` an integer 
(e.g., the character-string `q.46` instead of the `i.number` 
46).  Likewise, a type where one field is an integer 
(representing someone's age, say), will never be instantiated 
with something `i.other than` an integer in that field.  
Such minimal guarantees, however, are too coarse for 
safety-conscious programming.  Even the smallest 
(8-bit) unsigned integer type would permits someone's age to 
be 255 years, which is surely an error.  So any 
safety-conscious code dealing with ages needs to check that 
the numbers fall in a range narrower than built-in 
types allow on their own, or to ensure that such checks are 
performed ahead of time.   
`p`

`p.
The central technical challenge of safety-conscious coding 
is therefore to `i.extend` or `i.complement` each programming 
languages' built-in type system so as to represent 
more fine-grained assumptions and specifications.  
While individual tests may seem straightforward on a 
local level, a consistent 
data-verification architecture %-- how this coding dimension 
integrates with the totality of software features and 
responsibility %-- can be much more complicated.  
Developers need to consider several overarching questions, 
such as: 

`itemize,
`item; Should data validation be included in the same 
procures which operate on (validated) data, or 
should validation be factored into separate procedures?

`item; Should data validation be implemented at the type 
level or the procedural level?  That is, should specialized 
data types be implemented that are guaranteed only to 
hold valid data?  Or should procedures work with more 
generic data types and perform validations on a case-by-case 
basis?

`item; How should incorrect data be handled?  In CyberPhysical software, 
there may be no obvious way to abort an operation in the 
presence of corrupt data.  Terminating the application may not be 
an option; silently canceling the desired operation or trying to substitute 
`q.correct` or `q.default` data may be unwise; and 
presenting technical error messages to human users may be confusing.  
`itemize`

This section will sketch an overview of the data-validation 
issues from the broader vantage of planning and stakeholder 
expectations, before addressing narrower programming concern 
in subsequent sections.
`p` 

`subsection.Gatekeeper Code and Fragile Code`

`p.
I will use the term `i.gatekeeper code` for any code which checks 
programming assumptions more fine-grained than strong typing 
alone allows %-- for example, that someone's age is not reported 
as 255 years, or that systolic pressure is not recorded as 
less than diastolic.  I will use the term `i.fragile code` for
code which `i.makes` programming assumptions and does not itself 
verify that these assumptions are obeyed.  Fragile code is 
especially consequential when incorrect data would cause the 
code to fail significantly %-- to crash the application, 
enter an infinite loop, or any other nonrecoverable scenario.
`p`

`p.
Note that `q.fragile` is not a term of criticism %-- some algorithms 
simply work on a restricted space of values, and it is inevitable 
that code implementing such algorithms will only work properly 
when provided values with the requisite properties.  It is necessary 
to ensure that such algorithms are `i.only` called with 
correct data.  But insofar as testing of the data lies outside 
the algorithms themselves, the proper validation has to occur 
`i.before` the algorithms commense.  In short, `i.fragile` and 
`i.gatekeeper` code often has to be paired off: for each 
segment of fragile code which `i.makes` assumptions, there has 
to be a correspondng segment of gatekeeper code which 
`i.checks` those assumptions.  
`p`

`p.
In that general outline, however, there is room for a variety 
of coding styles and paradigms.  Perhaps these can be broadly 
classified into three groups: 

`enumerate,

`item; Combine gatekeeper and fragile code in one procedure.
`item; Separate gatekeeper and fragile code into different procedures.
`item; Implement narrower types so that gatekeeper code is 
called when types are first instantiated.

`enumerate`

Consider a function which calculates the difference between 
sytolic and diastolic blood pressure, returning an unsigned 
integer.  If this code were called with malformed data where 
systolic and diastolic were inverted, the difference would 
be a negative number, which (under binary conversion to an 
unsigned integer) would come out as a potentially 
exteremely large positive number (as if the patient had 
blood pressure in, say, the tens-of-thousands).  This nonsensical 
outcome indicates that the basic calculation is fragile.  
With then have three options: test that systolic-greater-than 
diastolic `i.within the procedure`/; require that this test 
be performed prior to the procedure being called; 
or use a special data structure so that 
systolic-over-diastolic can be confirmed as soon as 
any blood-pressure value is constructed in the system.
`p`

`p.
There are strengths and weaknesses of each option.  
Checking parameters at the start of a procedure makes 
code more complex and harder to maintain, and also 
makes updating the code more difficult.  The 
blood-pressure case is a simple example, but in real 
situations there may be more complex data-validation 
requirements, and separating code which `i.checks` 
data from code which `i.uses` data, into different 
procedures, may simplify subsequent code maintanence.  
If the `i.validation` code needs to be modified, 
this can be done without modifying the 
code which actually works on the data (reducing the 
risk of new coding errors).  In short, factoring 
`i.gatekeeper` and `i.fragile` code into separate 
procedures exemplifies the programming principle of 
`q.separation of concerns`/.  On the other hand, 
such separation creates a new problem of ensuring that 
the gatekeeping procedure is always called.  
Meanwhile, using special-purpose, narrowed data types 
adds comlexity to the overall software if these data types 
are unique to that one code base, and therefore 
incommensurate with data provided by external sources.  
In these situations the software must transform data between 
more generic and more specific representations before 
sharing it (as sender or receiver), which makes 
the code more complicated.  
`p` 

`p.
In this preliminary discussion I refrain from any concrete 
analysis of the coding or type-theoretic models that 
can shed light on these options; I merely want to 
identify the kinds of questions which need to be 
addressed in preparation for a software project, 
particularly in the CyberPhysical domain.  
Ideally, protocols for pairing up fragile and 
gatekeeper code should be consistent through the code base. 
`p`

`p.
In the specific CyberPhysical context, gatekeeping is especially 
important when working with device data.  Such data is 
almost always constrained by the physical construction of 
devices and the kinds of physical quantities they measure 
(if they are sensors) or their physical capabilities 
(if they are `q.actuators`/, devices that cause changes in their 
environments).  For sensors, it is an empirical question what 
range of values can be expected from properly functioning 
devices (and therefore what validations can check that the 
device is working as intended).  For actuators, it should 
be similarly understood what range of values guarantee 
safe, correct behavior.  For any device then we can 
construct a `i.profile` %-- an abstract, mathematical 
picture of the space of `q.normal` values associated with 
proper device performance.  Gatekeeping code can 
then ensure that data received from or sent to devices 
fits within the profile.  Defining device profiles, and 
explicitly notating the corresponding gatekeeping code, 
should therefore be an essential pre-implementation planning 
step for CyberPhysical software hubs.  
`p`

`subsection.Proactive Design`
`p.
I have thus far argued that applications
which process CyberPhysical data need to rigorously organize their functionality
around specific devices' data profiles.  The functions that directly interact
with devices %-- receiving data from and perhaps sending instructions
to each one %-- will in many instances be `q.fragile` in the sense
I invoke in this chapter.  Each of these functions may make assumptions
legislated by the relevant device's
specifications, to the extent that using any function too broadly
constitutes a system error.  Furthermore, CyberPhysical devices that are
not full-fledged computers may
exhibit errors due to mechanical malfunction, hostile attacks,
or one-off errors in electrical-computing operations, causing
performance anomalies which look like software mistakes even if the code is
entirely correct (see `cite<MichaelEngel>; and
`cite<LavanyaRamapantulu>;, for example).  As a
consequence, `i.error classification` is especially
important %-- distinguishing kinds of software errors
and even which problems are software errors to begin with.
`p`

`p.
To cite concrete examples,
a heart-rate sensor generates continuously-sampled integer values
whose understood Dimension of Measurement is in `q.beats per minute`
and whose maximum sensible range (inclusive of both
rest and exercise) corresponds roughly
to the `ftytwoh; interval.  Meanwhile, an accelerometer
presents data as voltage changes in two or three directional
axes, data which may only produce signals when a change occurs
(and therefore is not continuously varying), and which is
mathematically converted to yield information about physical
objects' (including a person's) movement and incline.  The
pairwise combination of heart-rate and acceleration data
(common in wearable devices) is then a mixture of these
two measurement profiles %-- partly continuous and
partly discrete sampling, with variegated axes and
inter-axial relationships.
`p`

`p.
These data profiles need to be integrated with CyberPhysical code from a
perspective that cuts across multiple dimensions of project scale and
lifetime.  Do we design for biaxial or triaxial accelerometers, or both,
and may this change?  Is heart rate to be sampled in a context where
the range considered normal is based on `q.resting` rate or is it
expanded to factor in subjects who are exercising?  These kinds
of questions point to the multitude of subtle and project-specific
specifications that have to be established when implementing and then
deploying software systems in a domain like Ubiquitous Computing.
It is unreasonable to expect that all relevant standards will be
settled `i.a priori` by sufficiently monolithic and comprehensive
data models (like Ontologies, or database schema).  Instead,
developers and end-users need to acquire trust in a development process
which is ordered to make standardization questions become apparent
and capable of being followed-up in system-wide ways.
`p`

`p.
For instance, the hypothetical questions I pondered in
the last paragraph %-- about biaxial vs.
triaxial accelerometers and about at-rest vs. exercise
heart-rate ranges %-- would not
necessarily be evident to software engineers or project architects when the
system is first conceived.  These are the kind of modeling questions that tend
to emerge from the ground up as individual functions and datatypes are
implemented.  For this reason, code development serves a role beyond just
providing the software which a system, once placed in operation, will use.
The code at fine-grained scales also reveals questions that need to be
asked at larger scales, and then the larger answers reflected back in the
fine-grained coding assumptions, plus annotations
and documentation.  The overall
project community needs to recognize software implementation as a crucial
source for insights into the specifications that have to be established
to make the operationalized system correct and resilient.
`p`

`p.
For these reasons, code-writing %-- especially at the smallest scales %--
should proceed via paradigms disposed to maximize
the `q.discovery of questions` effect that I just
highlighted.  Deployed systems will be
more trustworthy when and insofar as their software bears witness to a project
evolution that has been well-poised to unearth questions
that could otherwise diminish the system's trustworthiness.
Lest this seem like common sense and unworthy of being emphasized
so lengthily, I'd comment that literature on `USH;, for
example, appears to place much greater emphasis on Ontologies or Modeling
Languages whose goal is to predetermine software design at such
detail that the actual code merely enacts a preformulated schema,
rather than incorporate subjects (like type Theory and
Software Language Engineering) whose insights can
help ensure that code development plays a more proactive role.
`p`

`p.
`q.Proactiveness`/, like transparency and trustworthiness, has been
identified as a core `USH; principle, referring (again in
the series intro, as above)
to `q.data transmission to healthcare providers
... `i.to enable necessary interventions`/` (my emphasis).  In
other words %-- or so this language implies, as an
unstated axiom %--
patients need to be confident in deployed `USH; products
to such degree that they are comfortable with clinical/logistical
procedures %-- the functional design of medical spaces; decisions about
course of treatment %-- being grounded in part on data generated from
a `USH; ecosystem.  This level of trust, or so I would argue,
is only warranted if patients feel
that the preconceived notions of a `USH; project have been vetted against
operational reality %-- which can happen through the interplay between
the domain experts who germinally envision a project and the programmers
(software and software-language engineers) who, in the end, produce its
digital substratum.
`p`

`p.
`q.Transparency` in this environment means that `USH; code needs
to explicitly declare its operational assumptions, on the
zoomed-in function-by-function scale, and also exhibit its
Quality Assurance strategies, on the zoomed-out system-wide scale.  It
needs to demonstrate, for example, that the code base has sufficiently
strong typing and thorough testing that devices are always matched to
the proper processing and/or management functions: e.g., that there are no
coding errors or version-control mismatches which might cause situations
where functions are assigned to the wrong devices, or the wrong
versions of correct devices.  Furthermore, insofar as most `USH; data
qualifies as patient-centered information that may be personal and
sensitive, there needs to be well-structured transparency concerning
how sensitive data is allowed to `q.leak` across the system.  Because
functions handling `USH; devices are inherently fragile,
the overall system needs extensive and openly documented
gatekeeping code that both validates their input/output and controls
access to potentially sensitive patient data.
`p`

`thindecoline;

`p.
Fragile code is not necessarily a sign of poor design.  Sometimes
implementations can be optimized for special circumstances, and
optimizations are valuable and should be used wherever possible.  Consider an
optimized algorithm that works with two lists that must be the same size.
Such an algorithm should be preferred over a less efficient
one whenever possible %-- which is to say, whenever dealing with two
lists which are indeed the same size.  Suppose this algorithm is
included in an open-source library intended to be shared among many different
projects.  The library's engineer might, quite reasonably, deliberately
choose not to check that the algorithm is invoked on same-sized lists
%-- checks that would complicate the code, and sometimes slow the
algorithm unnecessarily.  It is then the responsibility of code that
`i.calls` whatever function implements the algorithm to ensure that it
is being employed correctly %-- specifically, that this
`q.client` code does `i.not` try
to use the algorithm with `i.different-sized` lists.  Here `q.fragility` is
probably well-motivated: accepting that algorithms are sometimes
implemented in fragile code can make the code cleaner, its intentions
clearer, and permits their being optimized for speed.
`p`


`p.
The opposite of fragile code is sometimes called `q.robust` code.
While robustness is desirable in principle, code which simplistically
avoids fragility may be harder to maintain than deliberately fragile but
carefully documented code.  Robust code often has to check for many
conditions to ensure that it is being used properly, which can make
the code harder to maintain and understand.  The hypothetical
algorithm that I contemplated last paragraph
could be made robust by `i.checking`
(rather than just `i.assuming`/) that it is invoked with same-sized lists.
But if it has other requirements %-- that the lists are non-empty,
and so forth %-- the implementation can get padded with a chain of
preliminary `q.gatekeeper` code.  In such cases the gatekeeper
code may be better factored into a different function, or expressed
as a specification which engineers must study before attempting to
use the implementation itself.
`p`

`p.
Such transparent declaration of coding assumptions and specifications can
inspire developers using the code to proceed attentively,
which can be safer in the long run than trying to avoid fragile code
through engineering alone.  The takeaway is that while `q.robust` is
contrasted with `q.fragile` at the smallest scales (such as
a single function), the overall goal is systems and components that are robust at the
largest scale %-- which often means accepting `i.locally` fragile
code.  Architecturally, the ideal design may combine
individual, `i.locally fragile` units with rigorous documentation and gatekeeping.
So defining and declaring specifications is
an intrinsic part of implementing code bases which are both robust
and maintainable.
`p`

`p.
Unfortunately, specifications are often created
only as human-readable documents, which might have a semi-formal
structure but are not actually machine-readable.
There is then a disconnect between features `i.in the code itself` that
promote robustness, and specifications intended for `i.human` readers
%-- developers and engineers.  The code-level and
human-level features promoting robustness will tend to overlap partially
but not completely, demanding a complex evaluation of where gatekeeping
code is needed and how to double-check via
unit tests and other post-implementation examinations.  This is the
kind of situation %-- an impasse, or partial but incomplete overlap,
between formal and semi-formal specifications %-- which many programmers
hope to avoid via strong type systems.
`p`

`p.
Most programming language will provide some basic (typically relatively
coarse-grained) specification semantics, usually
through type systems and straightforward code observations
(like compiler warnings about unused or uninitialized variables).
For sake of discussion, assume that all languages have distinct
compile-time and run-time stages (though these may be opaque to
the codewriter).  We can therefore distinguish compile-time
tests/errors from run-time tests and errors/exceptions.
Via Software Language Engineering (`SLE;), we can study
questions like: how
should code requirements be expressed?  How and to
what extent should requirements be tested by the language
engine itself %-- and beyond that how can the language help coders implement
more sophisticated gatekeepers than the language natively offers?
What checks can and should be compile-time or run-time?  How
does `q.gatekeeping` integrate with the overall semantics and
syntax of a language?
`p`

`p.
Most type systems provide only relatively coarse classification
of a universe of typed values %-- even though many functions require their
arguments to fit more precise specifications than practical
type systems allow.  This is unfortunate given the premise of
`q.separation of concerns` and the maxim that
functions should have single and narrow roles: `i.validating` input
is actually a different role than `i.doing` calculations.  Maximwise, then,
functions with fine requirements can be split into two: a
gatekeeper that validates input before a fragile function is called,
and separate from that the function's own implementation itself.
A related idea is overloading fragile functions: for example,
a function which takes one value can be overloaded in terms
of whether the value fits in some prespecified range.  These two
can be combined: gatekeepers can test inputs and call one of several
overloaded functions, based on which overload's specifications are
satisfied by the input.
`p`

`p.
But despite their potential elegance, most practical programming languages
do not supply much language-level support for expressing
groups of fine-grained functions along these lines.  Advanced 
type-theoretic constructs %-- including Dependent Types,
typestate, and effect-systems %-- model requirements with more precision
than can be achieved via conventional type systems alone.  Integrating these
paradigms into core-language type systems permits data validation 
to be integrated with general-purpose type checking, without the need for
static analyzers or other `q.third party` tools (that is, projects maintained
orthogonally to the actual language engineering; i.e., to
compiler and runtime implementations).  Unfortunately, 
these advanced type systems are more complex to implement.  
If software language engineers aspire to make Dependent Types and 
similar advanced constructs part of their core language, 
creating compilers and runtime engines for these languages 
becomes more difficult.
`p` 

`p.
If these observations are correct, I maintain that it is a worthwhile
endeavor to return to the theoretical drawing board, with the goal 
of improving programming language technology itself.  
Programming languages are, at one level, artificial 
`i.languages` %-- they allow humans to communicate 
algorithms and procedures to computer processors, and 
to one another.  But programming languages are also 
themselves engineering artificats.  It is a complex 
project to transform textual source-code %-- which is 
human-readable and looks a little bit like natural 
language %-- into binary instructions that computers 
can execute.  For each language, there is a stack 
of tools %-- parsers, compilers, and/or runtime libraries 
%-- which enable source code to be executed 
according to the language specifications.  
Language design is therefore constrained by 
what is technically feasible for these supporting tools.  
Practical language design, then %-- often called 
Software Language Engineering %-- is an interdisciplinary 
process which needs to consider both the dimension of 
programming languages as communicative media and 
as digital artifacts with their own engineering challenges 
and limitations.
`p`

`subsection.Core Language vs. External Tools`

`p.
Because of programming languages' engineering limitations, 
such as I just outlined, software projects should not 
necessarily rely on core-language features for 
responsible, safety-consious programming.  
Academic and experimental languages tend to have 
more advanced features, and to embody more 
cutting-edge language engineering, compared to mainstream 
programming languages.  However, it is not always feasible 
or desirable to implement important software with 
experimental, non-mainstream languages.  By their nature, 
such projects tend to produce code that must be understood by 
many different developers and which remains usable years into 
the future.  These requirements point toward 
well-established, mainstream languages %-- and 
development techniques overall %-- as opposed to 
unfamiliar and experimental methodologies, even if those 
methodologies have potential for safer, more productive 
coding in the future.   
`p`

`p.
As a result, methodologies for safety-conscious coding can be 
split between those which depend on core-language feature, 
and those which depend on external, retroactive analysis 
of sensitive code.  On the one hand, some languages and projects
prioritize specifications that are intrinsic to the language and integrate
seamlessly and operationally into the language's foundational
compile-and-run sequence.  Improper code (relative to specifications)
should not compile, or, as a last resort, should fail gracefully at run-time.
Moreover, in terms of programmers' thought processes, the
description of specifications should be intellectually continuous
with other cognitive processes involved in composing code, such
as designing types or implementing algorithms.  For sake of 
discussion, I will call this paradigm `q.internalism`/.  
`p`

`p.
The `q.internalist` mindset seeks to integrate data 
validation seamlessly with other language features.  
Malformed data should be flagged via similar mechanisms 
as code which fails to type-check; and errors should 
be detected as early in the development process as possible.   
Such a mindset is evident in passages like this (describing
the Ivory programming language):

`displayquote,
Ivory's type system is shallowly embedded within Haskell's
type system, taking advantage of the extensions provided by [the
Glasgow Haskell Compiler].  Thus, well-typed Ivory programs
are guaranteed to produce memory safe executables, `i.all without
writing a stand-alone type-checker` [my emphasis].  In contrast, 
the Ivory syntax is `i.deeply` embedded within Haskell.
This novel combination of shallowly-embedded types and deeply-
embedded syntax permits ease of development without sacrificing
the ability to develop various back-ends and verification tools [such as]  
a theorem-prover back-end. All these back-ends share the
same AST [Abstract Syntax Tree]: Ivory verifies what it compiles.
\cite[p. 1]{ivory}.
`displayquote`   In other words, the creators of Ivory are promoting the
fact that their language buttresses via its type system 
%-- and via a mathematical precision suitable for 
proof engines %-- 
code guarantees that for most languages require external
analysis tools.
`p`

`p.
Contrary to this `q.internalist` philosophy, other approaches
(perhaps I can call them `q.externalist`/) favor a neater separation
of specification, declaration and testing from the core language,
and from basic-level coding activity.  In particular %-- according to 
the `q.externalist` mind-set %-- most of the more important or complex
safety-checking does not natively integrate with the
underlying language, but instead requires
either an external source code analyzer, or 
regulatory runtime libraries, or some combination of the two.  
Moreover, it is unrealistic
to expect all programming errors to be avoided with enough proactive planning,
strong typing, and safety-focused paradigms: any complex
code base requires some retroactive design, some combination
of unit-testing and mechanisms (including those
third-party to both the language and the projects whose code is
implemented in the language) for externally
analyzing, observing, and higher-scale testing for the code,
plus post-deployment monitoring.
`p`

`p.
As a counterpoint to the features cited as benefits to the
Ivory language, which I identified as representing the 
`q.internalist` paradigm, consider Santanu Paul's Source Code Algebra (`SCA;)
system described in `cite<SantanuPaul>; and
`cite<GiladMishne>;, `cite<TillyEtAl>;:
`displayquote,
Source code Files are processed using
tools such as parsers, static analyzers, etc. and the necessary information
(according to the SCA data model) is stored in a repository.  A user interacts
with the system, in principle, through a variety of high-level languages, or
by specifying SCA expressions directly.  Queries are mapped to SCA expressions,
the SCA optimizer tries to simplify the expressions, and finally, the SCA
evaluator evaluates the expression and returns the results to the user.`nl;
We expect that many source code queries will be expressed using high-level
query languages or invoked through graphical user interfaces.  High-level queries
in the appropriate form (e.g., graphical, command-line, relational, or
pattern-based) will be translated into equivalent SCA expressions.  An SCA
expression can then be evaluated using a standard SCA evaluator, which
will serve as a common query processing engine.  The analogy from
relational database systems is the translation of SQL to expressions based on
relational algebra. \cite[p. 15]{SantanuPaul}
`displayquote`

So the `i.algebraic` representation of source code is favored
here because it makes computer code available
as a data structure that can be processed via `i.external`
technologies, like `q.high-level languages`/, query languages, and
graphical tools.  The vision of an optimal development environment
guiding this kind of project is opposite, or at least
complementary, to a project like Ivory: the whole point
of Source Code Algebra is to pull code verification %-- the
analysis of code to build trust in its safety and robustness
%-- `i.outside` the language itself and into the surrounding
Development Environment ecosystem.
`p`

`p.
These philosophical differences are normative as well as descriptive:
they influence programming language design, and how languages influence
coding practices.  One goal of language design is to produce languages 
which offer rigorous guarantees %-- fine-tuning the languages' 
type system and compilation model to maximize the level of detail 
guaranteed for any code which type-checks and compiles.  
Another goal of language design is to define syntax and 
semantics permitting valid source code to be analyzed 
as a data structure in its own right.  Ideally, 
languages can aspire to both goals; in practice, however, 
achieving both equally can be technically difficult.  
The internal representations conducive to strong type and 
compiler guarantees are not necessarily amenable to 
convenient source-level analysis, and vice-versa.    
`p`

`p.
Language engineers, then, have to work with
two rather different constituencies.  One community of
programmers tends to prefer that specification and validation be
integral to/integrated with the language's type system and
compile-run cycle (and standard runtime environment); whereas
a different community prefers to treat code evaluation
as a distinct part of the development process, something logically, operationally,
and cognitively separate from hand-to-screen codewriting
(and may chafe at languages restricting certain code constructs
because they can theoretically produce coding errors, even when
the anomalies involved are trivial enough to be tractable for
even barely adequate code review).  One challenge for language engineers is
accordingly to serve both communities.  We can aspire to
implement type systems which are sufficiently
expressive to model many specification, validation, and
gatekeeping scenarios, while also anticipating that language code
should be syntactically and semantic designed to be
useful in the context of external tools (like
static analyzers) and models (like Source Code
Algebras and Source Code Ontologies).
`p`

`p.
The techniques I discuss here work toward these goals on two levels.  First, I
propose a general-purpose representation of computer code in terms
of Directed Hypergraphs, sufficiently rigorous to codify a
theory of `q.functional types` as types whose values are initialized from
formal representations of source code %-- which is to say, in the present
context, code graphs.  Next, I
analyze different kinds of `q.lambda abstraction` %-- the idea of
converting closed expressions to open-ended formulae by asserting that
some symbols are `q.input parameters` rather than fixed values, as in
`mOldLambda;-Calculus %-- from the perspective of
axioms regulating
how inputs and outputs may be passed to and obtained from
computational procedures.  I bridge these topics %-- Hypergraphs
and Generalized `mOldLambda;-Calculi %-- by taking abstraction as a
feature of code graphs wherein some hypernodes are singled out
as procedural
`q.inputs` or `q.outputs`/.  The basic form of this model
%-- combining what are essentially two otherwise unrelated
mathematical formations, Directed Hypergraphs and
(typed) Lambda Calculus %-- is laid out in
Sections `sectsym;\hyperref[sectTwo]{I}
and `sectsym;\hyperref[sectThree]{II}.
`p`

`p.
Following that sketch-out, I engage a more rigorous study of
code-graph hypernodes as `q.carriers` of runtime values, some of
which collectively form `q.channels` concerning values which
vary at runtime between different executions of a function body.
Carriers and channels piece together to form
`q.Channel Complexes` that describe structures with meaning both
within source code as an organized system (at `q.compile time`
and during static code analysis) and at runtime.  Channel Complexes
have four different semantic interpretations, varying via the
distinctions between runtime and compile-time and between
`i.expressions` and (function) `i.signatures`/.
I use the framework of Channel Complexes to identify
design patterns that achieve many goals of
`q.expressive` type systems while being implementationally
feasible given the constraints of mainstream programming
languages and compilers, such as `Cpp;.
`p`

`p.
After this mostly theoretical prelude, I conclude this
chapter with a discussion of code annotation, particularly
in the context of CyberPhysical Systems.  Because CyberPhysical applications
directly manage physical devices, it is especially important that they be
vetted to ensure that they do not convey erroneous instructions
to devices, do not fail in ways that leave devices uncontrolled, and
do not incorrectly process the data obtained from devices.
Moreover, CyberPhysical devices are intrinsically `i.networked`/,
enlarging the `q.surface area` for vulnerability, and often worn by people
or used in a domestic setting, so they tend carry personal (e.g., location)
information, making network security protocols especially important
(`cite<RonaldAshri>;, `cite<LalanaKagal>;,
`cite<LavanyaRamapantulu>;, `cite<TakeshiTakahashi>;,
`cite<MozhganTavakolifard>;).  The dangers
of coding errors and software vulnerabilities, in CyberPhysical
Systems like the Internet of Things (`IoT;), are even more pronounced
than in other application domains.  While it is
unfortunate if a software crash causes someone to lose data,
for example, it is even more serious if a CyberPhysical `q.dashboard`
application were to malfunction and leave physical, networked
devices in a dangerous state.
`p`

`p.
To put it differently, computer code which directly interacts with
CyberPhysical Systems will typically have many fragile pieces, which
means that applications providing user portals to maintain and control
CyberPhysical Systems need a lot of gatekeeping code.  Consequently,
code verification is an important part of preparing CyberPhysical Systems
for deployment.  The `q.Channelized Hypergraph` framework I develop here
can be practically expressed in terms of code annotations that benefit
code-validation pipelines.  This use case is shown in demo code
published as a data set alongside this chapter (available for
download at \url{https://github.com/scignscape/PGVM}).
These techniques are not designed to substitute for Test Suites or
Test-Driven Development,
though they can help to clarify the breadth of coverage of
a test suite %-- in other
words, to justify claims about tests being thorough enough that
the code base passing all tests actually does argue for the code
being safe and reliable.  Nor are code annotations intended to
automatically verify that code is safe or
standards-compliant, or to substitute for
more purely mathematical code analysis using proof-assistants.
But the constructions presented here,
I claim, can be used as part of a
code-review process that will enhance stakeholders' trust
in safety-critical computer code, in cost-effective, practically
effective ways.
`p`

`p.
In particular, to take an example especially relevant for this volume,
the code which directly interacts with `USH; devices needs particularly
thorough documentation, review, and (perhaps, as a way to
achieve these) annotations.  Code designed and annotated via
techniques reviewed in this chapter will not be guaranteed to
protect privacy, block malware, or detect all device-related errors.
But such code `i.will` be amenable to analytic processes which
should increase different parties' (doctors, patients,
application developers) assessment of its transparency and
trustworthiness.  In the end, components earn trust not through
one monolithic show of robustness but via designs judged
to reflect quality according to multiple standards and
paradigms, with each approach to code evaluation adding its
own measure to stakeholders' overall trust in the system.
`p`
